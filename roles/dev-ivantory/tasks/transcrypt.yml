---
- name: detect latest transcrypt release
  uri:
    url: https://github.com/elasticdog/transcrypt/releases/latest
    method: HEAD
  connection: local
  register: latest_release
  when: divan_transcrypt_release == 'latest'

- name: extract transcrypt release from github page
  set_fact:
    divan_transcrypt_release: "{{ latest_release.url | basename }}"
  when: latest_release is not skipped

- debug:
    msg: "latest transcrypt release: {{ divan_transcrypt_release }}"
  run_once: yes
  when: latest_release is not skipped

- name: install transcrypt
  get_url:
    url: "{{ divan_transcrypt_url }}"
    dest: "{{ divan_transcrypt_executable }}"
    mode: 0755
    force: "{{ divan_transcrypt_reinstall | bool }}"
  become: yes


- name: decypher repository
  command: >
    "{{ divan_transcrypt_executable }}"
      -c "{{ divan_cipher }}"
      -p "{{ divan_password }}"
      -y
  args:
    chdir: "{{ divan_dir }}"
    creates: "{{ divan_decrypted_flag }}"
  register: transcrypt_result
  failed_when:
    transcrypt_result.rc != 0 and 'repository is already configured' not in transcrypt_result.stderr

- name: mark repository as decrypted
  file:
    path: "{{ divan_decrypted_flag }}"
    state: touch
  when: transcrypt_result is successful
  changed_when: false


- name: verify decryption
  block:
    - name: read content of the check file
      slurp:
        src: "{{ divan_dir }}/{{ divan_check_file }}"
      register: slurped_check_file

    - name: derive base name and content of check file
      set_fact:
        check_file_content: "{{ (slurped_check_file['content'] | b64decode).strip() }}"
        check_file_basename: "{{ divan_check_file | basename }}"

    - name: verify content of the check file
      assert:
        that: "check_file_content == check_file_basename"
        quiet: yes
  rescue:
    - name: remove failed checkout
      file:
        path: "{{ divan_dir }}"
        state: absent

    - name: decryption failed
      fail:
        msg: "Decryption failed! Maybe password is wrong? Aborting."
  when: divan_check_file != ''
  tags: divan_check_file


- name: harden permissions of secret files (slow way)
  block:
    - name: find secret files
      command: transcrypt --list
      args:
        chdir: "{{ divan_dir }}"
      changed_when: false
      failed_when: false
      register: transcrypt_list

    - name: derive list of secret files
      set_fact:
        secret_repo_files: "{{ transcrypt_list.stdout_lines
                             | map('regex_replace', '^', divan_dir + '/')
                             | list }}"

    - name: harden permissions (slow way)
      file:
        path: "{{ item }}"
        mode: 0600
      loop: "{{ secret_repo_files }}"
  when: not divan_harden_quickway |bool
  tags: divan_harden_secrets

- name: harden permissions (quick way)
  shell: |
    set -eo pipefail
    transcrypt --list | xargs -r chmod 600
  args:
    executable: /bin/bash
    chdir: "{{ divan_dir }}"
  changed_when: false
  when: divan_harden_quickway |bool
  tags: divan_harden_secrets
...
