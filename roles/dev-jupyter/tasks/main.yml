---
- setup:

- name: install system packages
  apt:
    name: "{{ jupyter_system_packages }}"
  become: yes

- name: install python packages
  pip:
    virtualenv: "{{ jupyter_root_dir }}"
    virtualenv_python: python3
    name: "{{ jupyter_pip_stage1 | list }}"

- name: install stage2 packages
  pip:
    virtualenv: "{{ jupyter_root_dir }}"
    name: "{{ (jupyter_pip_stage2 | list)
            + (jupyter_pip_extras | list) }}"

- name: configure notebook server
  template:
    src: jupyter_notebook_config.py.j2
    dest: "{{ jupyter_root_dir }}/jupyter_notebook_config.py"
  notify: restart jupyter

- block:
    - name: check current theme
      copy:
        content: "{{ jupyter_theme }}"
        dest: "{{ jupyter_root_dir }}/theme-marker.txt"
      register: theme_marker

    - name: change jupyter theme
      when: theme_marker is changed
      command: ./bin/jt {{ jupyter_theme }}
      args:
        chdir: "{{ jupyter_root_dir }}"
      register: run_jt
      failed_when: "run_jt.rc not in [0,1]"
  when: "jupyter_theme != ''"

- name: create work directory
  file:
    path: "{{ jupyter_work_dir }}"
    state: directory

- name: create directory for service unit
  file:
    path: "{{ jupyter_service_unit | dirname }}"
    state: directory

- name: setup user service unit
  template:
    src: jupyter.service.j2
    dest: "{{ jupyter_service_unit }}"
  notify: restart jupyter

- name: start the system service
  systemd:
    name: "{{ jupyter_service_name }}"
    user: yes
    daemon_reload: yes
    enabled: yes
    state: started

- name: integrate with nginx
  when: jupyter_nginx_hostname != ''
  block:
    - name: install nginx
      apt:
        name: nginx

    - name: create nginx config for jupyter
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-enabled/jupyter.conf
      notify: restart nginx

    - name: start nginx service
      systemd:
        name: nginx
        enabled: yes
        state: started

    - name: open nginx ports
      ufw:
        rule: allow
        port: 80
        proto: tcp
  become: yes

- name: open network port for direct access
  ufw:
    rule: allow
    port: "{{ jupyter_port }}"
    proto: tcp
    delete: "{{ jupyter_nginx_hostname != '' }}"
  become: yes

- name: checkout user git repository
  git:
    repo: "{{ item }}"
    dest: "{{ jupyter_work_dir }}/{{ item | basename | regex_replace('\\.git$','') }}"
    accept_hostkey: yes
    update: no
  loop: "{{ jupyter_git_repos }}"

- debug:
    msg: "See your Jupyter at http://{{ jupyter_nginx_hostname | default(ansible_fqdn|default(inventory_hostname, true) + ':' + jupyter_port|string, true) }}/"
...
