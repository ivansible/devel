---
- name: detect latest vagrant release
  uri:
    url: https://www.vagrantup.com/downloads.html
    creates: "{{ upgrade |ternary(omit, '/usr/bin/vagrant') }}"
    return_content: true
  vars:
    upgrade: "{{ vagrant_upgrade |bool or true }}"
  register: _vagrant_release
  until: _vagrant_release is successful
  when: vagrant_package_url == 'latest'

- name: extract latest vagrant package url
  set_fact:
    vagrant_package_url: "{{ _vagrant_release.content
                           | regex_search('https://[^\"]+64\\.deb') }}"
  when:
    - _vagrant_release is not skipped
    - _vagrant_release.content is defined

- name: detect installed vagrant release
  command: dpkg -s vagrant
  changed_when: false
  failed_when: false
  register: dpkg_result

- name: extract old and new vagrant version
  set_fact:
    old_vagrant_ver: "{{ dpkg_result.stdout_lines
                       | select('match', '^Version')
                       | join('')
                       | regex_search('[0-9.]+$') }}"
    new_vagrant_ver: "{{ vagrant_package_url
                       | basename
                       | regex_search('_[0-9.]+_')
                       | regex_replace('_') }}"

- debug:
    msg:
      - "latest vagrant .deb: {{ vagrant_package_url | basename }}"
      - "old vagrant version: {{ old_vagrant_ver | default('n/a', true) }}"
      - "new vagrant version: {{ new_vagrant_ver }}"
  run_once: true
  when:
    - _vagrant_release is not skipped
    - _vagrant_release.content is defined
    - old_vagrant_ver != new_vagrant_ver

- name: install vagrant package from url
  apt:
    deb: "{{ vagrant_package_url }}"
    only_upgrade: "{{ not vagrant_upgrade |bool }}"
  register: vagrant_deb_result
  when: (old_vagrant_ver != new_vagrant_ver
         and vagrant_package_url != 'latest')
        or vagrant_upgrade |bool
...
