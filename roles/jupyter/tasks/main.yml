---
- name: install system packages
  apt:
    name: "{{ jupyter_system_packages }}"
  become: true

- name: install python packages
  pip:
    virtualenv: "{{ jupyter_root_dir }}"
    virtualenv_python: python3
    name: "{{ jupyter_pip_stage1 | list }}"

- name: install stage2 packages
  pip:
    virtualenv: "{{ jupyter_root_dir }}"
    name: "{{ (jupyter_pip_stage2 | list)
            + (jupyter_pip_extras | list) }}"

- name: configure notebook server
  template:
    src: jupyter_notebook_config.py.j2
    dest: "{{ jupyter_root_dir }}/jupyter_notebook_config.py"
    mode: 0644
  notify: restart jupyter

- block:
    - name: check current theme
      copy:
        content: "{{ jupyter_theme }}"
        dest: "{{ jupyter_root_dir }}/theme-marker.txt"
        mode: 0644
      register: theme_marker

    - name: change jupyter theme
      when: theme_marker is changed
      command: ./bin/jt {{ jupyter_theme }}
      args:
        chdir: "{{ jupyter_root_dir }}"
      register: run_jt
      failed_when: "run_jt.rc not in [0,1]"
  when: jupyter_theme != ''  # noqa 602

- name: create work directory
  file:
    path: "{{ jupyter_work_dir }}"
    state: directory
    mode: 0755

- name: create directory for service unit
  file:
    path: "{{ jupyter_service_unit | dirname }}"
    state: directory
    mode: 0755

- name: setup user service unit
  template:
    src: jupyter.service.j2
    dest: "{{ jupyter_service_unit }}"
    mode: 0644
  notify: restart jupyter

- name: start the system service
  systemd:
    name: "{{ jupyter_service_name }}"
    user: true
    daemon_reload: true
    enabled: true
    state: started

- name: integrate with nginx
  when: jupyter_nginx_hostname != ''  # noqa 602
  block:
    - name: install nginx
      apt:
        name: nginx

    - name: create nginx config for jupyter
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-enabled/jupyter.conf
        mode: 0644
      notify: restart nginx

    - name: start nginx service
      systemd:
        name: nginx
        enabled: true
        state: started


    - name: open nginx ports in ufw
      ufw:
        rule: allow
        port: 80
        proto: tcp
      no_log: "{{ hide_secrets |true }}"
      when: lin_firewall == 'ufw'

    - name: open nginx ports in ferm
      ivansible.base.ferm_port:
        port: 80
        proto: tcp
        # comment as nginx rather than jupyter for idempotence
        comment: nginx
      tags: skip_ansible_lint
      when: lin_firewall == 'ferm'
  become: true


- name: open/close network port for direct access in ufw
  ufw:
    rule: allow
    port: "{{ jupyter_port |string }}"
    proto: tcp
    delete: "{{ jupyter_nginx_hostname != '' }}"  # noqa 602
  no_log: "{{ hide_secrets |bool }}"
  become: true
  when: lin_firewall == 'ufw'

- name: open/close network port for direct access in ferm
  ivansible.base.ferm_port:
    port: "{{ jupyter_port }}"
    proto: tcp
    zone: external
    state: "{{ (jupyter_nginx_hostname != '') |ternary('absent','present') }}"  # noqa 602
    comment: jupyter
  no_log: "{{ hide_secrets |bool }}"
  become: true
  when: lin_firewall == 'ferm'


- name: checkout user git repository
  git:
    repo: "{{ item }}"
    version: master
    dest: "{{ jupyter_work_dir }}/{{ item |basename |regex_replace('\\.git$','') }}"
    accept_hostkey: true
    update: false
  loop: "{{ jupyter_git_repos }}"

- name: report success
  debug:
    msg: "See your Jupyter at http://{{ jupyter_nginx_hostname |default(fallback_hostname) }}/"
  vars:
    fallback_hostname: "{{ ansible_fqdn |default(inventory_hostname, true) }}:{{ jupyter_port }}"
...
