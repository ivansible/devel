---
- name: ensure .ssh directory exists
  ansible.builtin.file:
    path: ~/.ssh
    state: directory
    mode: 0700

- name: authorize new public ssh keys
  ansible.posix.authorized_key:
    user: "{{ ansible_user_id }}"
    key: "{{ lookup('pipe', keygen_cmd) }}"
    comment: "{{ key_name }}"
    key_options: "{{ key_options }}"
    state: present
  vars:
    key_name: "{{ item |basename |regex_replace('[.]key$') }}"
    # use '&&' in the pipe to fail on chmod errors
    keygen_cmd: 'chmod 600 "{{ item }}" && ssh-keygen -y -f "{{ item }}"'
    interactive: "{{ dev_user_ssh_interactive |bool
                     and item in dev_user_ssh_keys_interactive }}"
    key_options: "{{ interactive |ternary(interactive_env, omit) }}"
    interactive_env: 'environment="BASH_ENV=~/.bashrc",environment="_SSH_=i"'
  loop: "{{ dev_user_ssh_keys_accept }}"
  loop_control:
    label: "{{ key_name }}{{ interactive |ternary('+','') }}"
  tags: dev_user_ssh_interactive

- name: revoke obsolete public ssh keys
  ansible.posix.authorized_key:
    user: "{{ ansible_user_id }}"
    key: "{{ lookup('pipe', keygen_cmd) }}"
    state: absent
  vars:
    key_name: "{{ item |basename |regex_replace('[.]key$') }}"
    keygen_cmd: 'chmod 600 "{{ item }}" && ssh-keygen -y -f "{{ item }}"'
  loop: "{{ dev_user_ssh_keys_revoke }}"
  loop_control:
    label: "{{ key_name }}"

- name: fallback to empty authorized keys file if no keys were provided
  ansible.builtin.copy:
    dest: ~/.ssh/authorized_keys
    content: ""
    mode: 0600
    force: false
...
